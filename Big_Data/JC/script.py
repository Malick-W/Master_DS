#!/usr/bin/env python3# -*- coding: utf-8 -*-class Liste(list):    def wait_and_pop(self):        while True:            try:                return self.pop()            except:                passclass Pic(Liste):    def epingler(self,feuille):#le serveur epingle la feuille        print(f"Pic: epingler '{feuille}'")        self.append(feuille)    def prendre(self):#le braman prend cette feuille pinglée        feuille = self.wait_and_pop()        print(f"Pic: prendre '{feuille}'")        return feuilleclass Bar(Liste):    def deposer(self,consommation):#le barman depose la consommation        print(f"Bar: déposer '{consommation}'")        self.append(consommation)    def prendre(self):        consommation = self.wait_and_pop()        print(f"Bar: prendre '{consommation}'")        return consommationclass Serveur:    def __init__(self,pic,bar):        self.pic = pic        self.bar = bar    def prendre_commande(self):        commande = commandes.pop()        print(f"Serveur: prendre commande '{commande}'")        return commande    def servir(self,consommation):        print(f"Serveur: servir '{consommation}'")    def run(self):        while True:            commande = self.prendre_commande()            self.pic.epingler(commande)            # attendre            consommation = self.bar.prendre()            self.servir(consommation)class Barman:    def __init__(self,pic,bar):        self.pic = pic        self.bar = bar    def fabriquer(self,commande):        print(f"Bareman: fabriquer '{commande}'")        return commande    def run(self):        while True:            commande = self.pic.prendre()            consommation = self.fabriquer(commande)            self.bar.deposer(consommation)if __name__=="__main__":  pic = Pic()  bar = Bar()  # pour tester  pic.append("1 pastis")  commandes = [ "1 demi", "2 pastis", "3 ti punchs"]    pic.extend(commandes)  un_barman = Barman(pic,bar)  un_barman.run()  un_serveur = Serveur(pic,bar)  un_serveur.run()
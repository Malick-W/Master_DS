to=GenMax$Gen[i,1],
weight=round(exp(GenMax$Gen[i,4]),2))
link2 = data.frame(from=GenMax$Gen[i,3],
to=GenMax$Gen[i,1],
weight=round(exp(GenMax$Gen[i,4]),2))
links = rbind(links,link1,link2)
}
}
net = graph_from_data_frame(d=links, vertices=nodes, directed=TRUE)
net
nombre_de_generation = max(MatIndiv[,18])
#colrs = rainbow(nombre_de_generation, alpha=.5)
colrs = brewer.pal(nombre_de_generation, "Set3")
# Attribuer des couleurs selon le type de média
V(net)$color = colrs[V(net)$gen]
V(net)$size = 12
V(net)$label.font = 4  #Fonte : 1 normal, 2 gras, 3, italique, 4 italique gras, 5 symbole
V(net)$label.color = "black"
V(net)$label.family = "Times"
# Épaisseur des liens fonction de l'intensité
E(net)$width = 0.5+E(net)$weight*4
# Changer la taille des flèches et la couleur des liens
E(net)$arrow.size = 0.2 #Taille des fléches, 1 par défaut
E(net)$arrow.width = 1.5 #Épaisseur des flèches, 1 par défaut
E(net)$edge.lty = 1 #Type de ligne
E(net)$label = E(net)$weight #Vecteur de type caractère utilisé pour nommer les liens
E(net)$edge.label.family = "Helvetica" #Police des labels (e.g.“Times”, “Helvetica”)
#E(net)$label.color = "black"
E(net)$edge.label.cex = 0.1 #Taille de la police pour les labels des liens
E(net)$edge.color = "gray80"
E(net)$edge.label = E(net)$weight
plot(net, main ="Représentation de la genealogie")
legend("bottomleft", inset = 0.01, title="génération", legend = 1:nombre_de_generation, pch=21,
text.font=4, col="#777777", pt.bg=colrs, pt.cex=3.5, cex=.3, bty="n", ncol=1)
}
#########################################################################################
################################# Application ###########################################
GenMax = construireGen()
representerGen(GenMax)
## Documentation sur les graphes
#https://f.hypotheses.org/wp-content/blogs.dir/2996/files/2017/02/visualiseR.pdf
#########################
# WADE El Hadji Malick  #
# Master 2 Data Science #
#########################
#########################################################################################
################################ Chargement des données #################################
## On charge les librairies necessaires
library("igraph") # pour le graphe
library('RColorBrewer') # pour les couleurs graphiques
## fournir le chemin absolu des données (2x-2x)
path = "/home/malick/Bureau/Master_DS/Option_Biologie/Pop2x.csv"
DF = read.csv2(file = path)
MatIndiv = data.matrix(DF)
n = nrow(MatIndiv)
ncol = 4*4+3
#########################################################################################
################################ Fonctions ##############################################
## compte le nombre d'enfants virtuels de meme genotype que l'enfant de reference
# in : enfants virtuels (matrice avec un genotype sur chaque ligne), genotype de l'enfant (vecteur)
# out : le nombre d'enfants virtuels correspondant
comparerEnf = function(EnfVirt, Enf){
EnfTri = sort(Enf)
nb = 0
for (i in 1:nrow(EnfVirt)) {
EnfVirt_Tri = sort(EnfVirt[i,])
if (sum(abs(EnfTri - EnfVirt_Tri)) == 0) {
nb = nb + 1
}
}
return(nb)
}
## Genere la liste des enfants virtuels a partir du genotype des parents pour le schema 2x-2x
# in : genotype des parents (vecteurs de taille 2)
# out : liste des enfants virtuels (matrice de 4 lignes et 2 colonnes)
genererEnfVirt22 = function(GenP1s, GenP2s){
EnfVirt = expand.grid(x = GenP1s, y = GenP2s)
return(as.matrix(EnfVirt))
}
## calcul de la proba d'un lien entre deux parents et un enfant
# in : infos genetiques sur les deux parents et l'enfant (vecteurs de taille 17 : genotypes 4x4 + ploidie)
# out : proba du lien
calculerProbaLien = function(GenP1, GenP2, GenE){
plo1 = GenP1[17]
plo2 = GenP2[17]
ploE = GenE[17]
if (plo1==2 & plo2==2 & ploE==2) {
p = 1
for (s in 1:4) {
GenP1S = GenP1[(4*(s-1)+1):(4*s)]
GenP2S = GenP2[(4*(s-1)+1):(4*s)]
GenES = GenE[(4*(s-1)+1):(4*s)]
G1 = GenP1S[1:2]
G2 = GenP2S[1:2]
GE = GenES[1:2]
EnfVirt = genererEnfVirt22(G1,G2)
nb = comparerEnf(EnfVirt, GE)
p = p*nb/4
}
}
return(p)
}
## construit pour un enfant la matrice des probas associee a tous les couples de parents potentiels
# in : numero de l'enfant
# out : matrice des probas (n lignes et n colonnes)
calculerProbasParents = function(e){
MatProbasParents = matrix(0, nrow=n, ncol=n)
for (i in 1:n) {
for (j in 1:n) {
if (i<j & i!=e[19] &  j!=e[19] & e[18]>MatIndiv[i, 18] & e[18]>MatIndiv[j, 18]) {
MatProbasParents[i,j] = calculerProbaLien(MatIndiv[i, ],MatIndiv[j, ],e)
}
}
}
s = sum(MatProbasParents)
if (s != 0){
MatProbasParents = MatProbasParents/s
}
return(MatProbasParents)
}
## Recherche du couple de parents le plus probable pour un enfant
# in : numero de l'enfant
# out : couple de parents le plus probable (vecteur de taille 4 : enfant/parent 1/parent 2/log-proba du lien)
recupParentsMax = function(e){
ParentsMax = c(e[19],0,0,0)
MatProbasParents = calculerProbasParents(e)
pmax = max(MatProbasParents)
if (pmax != 0){
IndMax = which(MatProbasParents == pmax, arr.ind = TRUE)
# si plusieurs couple de parents ont la même probabilité, on choisit aléatoirement un couple
IndMax = IndMax[sample(1:nrow(IndMax), 1),]
ParentsMax[4] = log(pmax)
ParentsMax[2] = round(IndMax[1])
ParentsMax[3] = round(IndMax[2])
# par convention : on met 0-0 pour les parents si toutes les probas sont nulles, et 0 dans la case log-proba
}
return(ParentsMax)
}
## Construit la genealogie de plus grande proba associee a la matrice des individus
# in : rien
# out : genealogie la plus probable (matrice de n lignes et 4 colonnes) munie de la log-vraisemblance
construireGen = function(){
Gen = matrix(0, nrow=n, ncol=4)
for (i in 1:n) {
Gen[i,] = recupParentsMax(MatIndiv[i, ])
}
return(list(Gen = Gen, lLik = sum(Gen[, 4])))
}
#########################################################################################
################################ Contruction du graphe #################################
## Construit le graphe généalogique associé aux données
representerGen = function(GenMax){
nodes = data.frame(id=GenMax$Gen[,1], gen=MatIndiv[,18])
links = data.frame()
for (i in 1:n) {
if (GenMax$Gen[i,2] != 0 & GenMax$Gen[i,3] != 0){
link1 = data.frame(from=GenMax$Gen[i,2],
to=GenMax$Gen[i,1],
weight=round(exp(GenMax$Gen[i,4]),2))
link2 = data.frame(from=GenMax$Gen[i,3],
to=GenMax$Gen[i,1],
weight=round(exp(GenMax$Gen[i,4]),2))
links = rbind(links,link1,link2)
}
}
net = graph_from_data_frame(d=links, vertices=nodes, directed=TRUE)
net
nombre_de_generation = max(MatIndiv[,18])
#colrs = rainbow(nombre_de_generation, alpha=.5)
colrs = brewer.pal(nombre_de_generation, "Set3")
# Attribuer des couleurs selon le type de média
V(net)$color = colrs[V(net)$gen]
V(net)$size = 12
V(net)$label.font = 4  #Fonte : 1 normal, 2 gras, 3, italique, 4 italique gras, 5 symbole
V(net)$label.color = "black"
V(net)$label.family = "Times"
# Épaisseur des liens fonction de l'intensité
E(net)$width = 0.5+E(net)$weight*4
# Changer la taille des flèches et la couleur des liens
E(net)$arrow.size = 0.2 #Taille des fléches, 1 par défaut
E(net)$arrow.width = 1.5 #Épaisseur des flèches, 1 par défaut
E(net)$edge.lty = 1 #Type de ligne
E(net)$label = E(net)$weight #Vecteur de type caractère utilisé pour nommer les liens
E(net)$edge.label.family = "Helvetica" #Police des labels (e.g.“Times”, “Helvetica”)
#E(net)$label.color = "black"
E(net)$edge.label.cex = 0.1 #Taille de la police pour les labels des liens
E(net)$edge.color = "gray80"
E(net)$edge.label = E(net)$weight
plot(net, main ="Représentation de la genealogie")
legend("bottomleft", inset = 0.01, title="génération", legend = 1:nombre_de_generation, pch=21,
text.font=4, col="#777777", pt.bg=colrs, pt.cex=3, cex=.3, bty="n", ncol=1)
}
#########################################################################################
################################# Application ###########################################
GenMax = construireGen()
representerGen(GenMax)
## Documentation sur les graphes
#https://f.hypotheses.org/wp-content/blogs.dir/2996/files/2017/02/visualiseR.pdf
#########################
# WADE El Hadji Malick  #
# Master 2 Data Science #
#########################
#########################################################################################
################################ Chargement des données #################################
## On charge les librairies necessaires
library("igraph") # pour le graphe
library('RColorBrewer') # pour les couleurs graphiques
## fournir le chemin absolu des données (2x-2x)
path = "/home/malick/Bureau/Master_DS/Option_Biologie/Pop2x.csv"
DF = read.csv2(file = path)
MatIndiv = data.matrix(DF)
n = nrow(MatIndiv)
ncol = 4*4+3
#########################################################################################
################################ Fonctions ##############################################
## compte le nombre d'enfants virtuels de meme genotype que l'enfant de reference
# in : enfants virtuels (matrice avec un genotype sur chaque ligne), genotype de l'enfant (vecteur)
# out : le nombre d'enfants virtuels correspondant
comparerEnf = function(EnfVirt, Enf){
EnfTri = sort(Enf)
nb = 0
for (i in 1:nrow(EnfVirt)) {
EnfVirt_Tri = sort(EnfVirt[i,])
if (sum(abs(EnfTri - EnfVirt_Tri)) == 0) {
nb = nb + 1
}
}
return(nb)
}
## Genere la liste des enfants virtuels a partir du genotype des parents pour le schema 2x-2x
# in : genotype des parents (vecteurs de taille 2)
# out : liste des enfants virtuels (matrice de 4 lignes et 2 colonnes)
genererEnfVirt22 = function(GenP1s, GenP2s){
EnfVirt = expand.grid(x = GenP1s, y = GenP2s)
return(as.matrix(EnfVirt))
}
## calcul de la proba d'un lien entre deux parents et un enfant
# in : infos genetiques sur les deux parents et l'enfant (vecteurs de taille 17 : genotypes 4x4 + ploidie)
# out : proba du lien
calculerProbaLien = function(GenP1, GenP2, GenE){
plo1 = GenP1[17]
plo2 = GenP2[17]
ploE = GenE[17]
if (plo1==2 & plo2==2 & ploE==2) {
p = 1
for (s in 1:4) {
GenP1S = GenP1[(4*(s-1)+1):(4*s)]
GenP2S = GenP2[(4*(s-1)+1):(4*s)]
GenES = GenE[(4*(s-1)+1):(4*s)]
G1 = GenP1S[1:2]
G2 = GenP2S[1:2]
GE = GenES[1:2]
EnfVirt = genererEnfVirt22(G1,G2)
nb = comparerEnf(EnfVirt, GE)
p = p*nb/4
}
}
return(p)
}
## construit pour un enfant la matrice des probas associee a tous les couples de parents potentiels
# in : numero de l'enfant
# out : matrice des probas (n lignes et n colonnes)
calculerProbasParents = function(e){
MatProbasParents = matrix(0, nrow=n, ncol=n)
for (i in 1:n) {
for (j in 1:n) {
if (i<j & i!=e[19] &  j!=e[19] & e[18]>MatIndiv[i, 18] & e[18]>MatIndiv[j, 18]) {
MatProbasParents[i,j] = calculerProbaLien(MatIndiv[i, ],MatIndiv[j, ],e)
}
}
}
s = sum(MatProbasParents)
if (s != 0){
MatProbasParents = MatProbasParents/s
}
return(MatProbasParents)
}
## Recherche du couple de parents le plus probable pour un enfant
# in : numero de l'enfant
# out : couple de parents le plus probable (vecteur de taille 4 : enfant/parent 1/parent 2/log-proba du lien)
recupParentsMax = function(e){
ParentsMax = c(e[19],0,0,0)
MatProbasParents = calculerProbasParents(e)
pmax = max(MatProbasParents)
if (pmax != 0){
IndMax = which(MatProbasParents == pmax, arr.ind = TRUE)
# si plusieurs couple de parents ont la même probabilité, on choisit aléatoirement un couple
IndMax = IndMax[sample(1:nrow(IndMax), 1),]
ParentsMax[4] = log(pmax)
ParentsMax[2] = round(IndMax[1])
ParentsMax[3] = round(IndMax[2])
# par convention : on met 0-0 pour les parents si toutes les probas sont nulles, et 0 dans la case log-proba
}
return(ParentsMax)
}
## Construit la genealogie de plus grande proba associee a la matrice des individus
# in : rien
# out : genealogie la plus probable (matrice de n lignes et 4 colonnes) munie de la log-vraisemblance
construireGen = function(){
Gen = matrix(0, nrow=n, ncol=4)
for (i in 1:n) {
Gen[i,] = recupParentsMax(MatIndiv[i, ])
}
return(list(Gen = Gen, lLik = sum(Gen[, 4])))
}
#########################################################################################
################################ Contruction du graphe #################################
## Construit le graphe généalogique associé aux données
representerGen = function(GenMax){
nodes = data.frame(id=GenMax$Gen[,1], gen=MatIndiv[,18])
links = data.frame()
for (i in 1:n) {
if (GenMax$Gen[i,2] != 0 & GenMax$Gen[i,3] != 0){
link1 = data.frame(from=GenMax$Gen[i,2],
to=GenMax$Gen[i,1],
weight=round(exp(GenMax$Gen[i,4]),2))
link2 = data.frame(from=GenMax$Gen[i,3],
to=GenMax$Gen[i,1],
weight=round(exp(GenMax$Gen[i,4]),2))
links = rbind(links,link1,link2)
}
}
net = graph_from_data_frame(d=links, vertices=nodes, directed=TRUE)
net
nombre_de_generation = max(MatIndiv[,18])
#colrs = rainbow(nombre_de_generation, alpha=.5)
colrs = brewer.pal(nombre_de_generation, "Set3")
# Attribuer des couleurs selon le type de média
V(net)$color = colrs[V(net)$gen]
V(net)$size = 12
V(net)$label.font = 4  #Fonte : 1 normal, 2 gras, 3, italique, 4 italique gras, 5 symbole
V(net)$label.color = "black"
V(net)$label.family = "Times"
# Épaisseur des liens fonction de l'intensité
E(net)$width = 0.5+E(net)$weight*4
# Changer la taille des flèches et la couleur des liens
E(net)$arrow.size = 0.2 #Taille des fléches, 1 par défaut
E(net)$arrow.width = 1.5 #Épaisseur des flèches, 1 par défaut
E(net)$edge.lty = 1 #Type de ligne
E(net)$label = E(net)$weight #Vecteur de type caractère utilisé pour nommer les liens
E(net)$edge.label.family = "Helvetica" #Police des labels (e.g.“Times”, “Helvetica”)
#E(net)$label.color = "black"
E(net)$edge.label.cex = 0.1 #Taille de la police pour les labels des liens
E(net)$edge.color = "gray80"
E(net)$edge.label = E(net)$weight
plot(net, main ="Représentation de la genealogie")
legend("bottomleft", inset = 0.01, title="génération", legend = 1:nombre_de_generation, pch=21,
text.font=4, col="#777777", pt.bg=colrs, pt.cex=2, cex=.3, bty="n", ncol=1)
}
#########################################################################################
################################# Application ###########################################
GenMax = construireGen()
representerGen(GenMax)
## Documentation sur les graphes
#https://f.hypotheses.org/wp-content/blogs.dir/2996/files/2017/02/visualiseR.pdf
#########################
# WADE El Hadji Malick  #
# Master 2 Data Science #
#########################
#########################################################################################
################################ Chargement des données #################################
## On charge les librairies necessaires
library("igraph") # pour le graphe
library('RColorBrewer') # pour les couleurs graphiques
## fournir le chemin absolu des données (2x-2x)
path = "/home/malick/Bureau/Master_DS/Option_Biologie/Pop2x.csv"
DF = read.csv2(file = path)
MatIndiv = data.matrix(DF)
n = nrow(MatIndiv)
ncol = 4*4+3
#########################################################################################
################################ Fonctions ##############################################
## compte le nombre d'enfants virtuels de meme genotype que l'enfant de reference
# in : enfants virtuels (matrice avec un genotype sur chaque ligne), genotype de l'enfant (vecteur)
# out : le nombre d'enfants virtuels correspondant
comparerEnf = function(EnfVirt, Enf){
EnfTri = sort(Enf)
nb = 0
for (i in 1:nrow(EnfVirt)) {
EnfVirt_Tri = sort(EnfVirt[i,])
if (sum(abs(EnfTri - EnfVirt_Tri)) == 0) {
nb = nb + 1
}
}
return(nb)
}
## Genere la liste des enfants virtuels a partir du genotype des parents pour le schema 2x-2x
# in : genotype des parents (vecteurs de taille 2)
# out : liste des enfants virtuels (matrice de 4 lignes et 2 colonnes)
genererEnfVirt22 = function(GenP1s, GenP2s){
EnfVirt = expand.grid(x = GenP1s, y = GenP2s)
return(as.matrix(EnfVirt))
}
## calcul de la proba d'un lien entre deux parents et un enfant
# in : infos genetiques sur les deux parents et l'enfant (vecteurs de taille 17 : genotypes 4x4 + ploidie)
# out : proba du lien
calculerProbaLien = function(GenP1, GenP2, GenE){
plo1 = GenP1[17]
plo2 = GenP2[17]
ploE = GenE[17]
if (plo1==2 & plo2==2 & ploE==2) {
p = 1
for (s in 1:4) {
GenP1S = GenP1[(4*(s-1)+1):(4*s)]
GenP2S = GenP2[(4*(s-1)+1):(4*s)]
GenES = GenE[(4*(s-1)+1):(4*s)]
G1 = GenP1S[1:2]
G2 = GenP2S[1:2]
GE = GenES[1:2]
EnfVirt = genererEnfVirt22(G1,G2)
nb = comparerEnf(EnfVirt, GE)
p = p*nb/4
}
}
return(p)
}
## construit pour un enfant la matrice des probas associee a tous les couples de parents potentiels
# in : numero de l'enfant
# out : matrice des probas (n lignes et n colonnes)
calculerProbasParents = function(e){
MatProbasParents = matrix(0, nrow=n, ncol=n)
for (i in 1:n) {
for (j in 1:n) {
if (i<j & i!=e[19] &  j!=e[19] & e[18]>MatIndiv[i, 18] & e[18]>MatIndiv[j, 18]) {
MatProbasParents[i,j] = calculerProbaLien(MatIndiv[i, ],MatIndiv[j, ],e)
}
}
}
s = sum(MatProbasParents)
if (s != 0){
MatProbasParents = MatProbasParents/s
}
return(MatProbasParents)
}
## Recherche du couple de parents le plus probable pour un enfant
# in : numero de l'enfant
# out : couple de parents le plus probable (vecteur de taille 4 : enfant/parent 1/parent 2/log-proba du lien)
recupParentsMax = function(e){
ParentsMax = c(e[19],0,0,0)
MatProbasParents = calculerProbasParents(e)
pmax = max(MatProbasParents)
if (pmax != 0){
IndMax = which(MatProbasParents == pmax, arr.ind = TRUE)
# si plusieurs couple de parents ont la même probabilité, on choisit aléatoirement un couple
IndMax = IndMax[sample(1:nrow(IndMax), 1),]
ParentsMax[4] = log(pmax)
ParentsMax[2] = round(IndMax[1])
ParentsMax[3] = round(IndMax[2])
# par convention : on met 0-0 pour les parents si toutes les probas sont nulles, et 0 dans la case log-proba
}
return(ParentsMax)
}
## Construit la genealogie de plus grande proba associee a la matrice des individus
# in : rien
# out : genealogie la plus probable (matrice de n lignes et 4 colonnes) munie de la log-vraisemblance
construireGen = function(){
Gen = matrix(0, nrow=n, ncol=4)
for (i in 1:n) {
Gen[i,] = recupParentsMax(MatIndiv[i, ])
}
return(list(Gen = Gen, lLik = sum(Gen[, 4])))
}
#########################################################################################
################################ Contruction du graphe #################################
## Construit le graphe généalogique associé aux données
representerGen = function(GenMax){
nodes = data.frame(id=GenMax$Gen[,1], gen=MatIndiv[,18])
links = data.frame()
for (i in 1:n) {
if (GenMax$Gen[i,2] != 0 & GenMax$Gen[i,3] != 0){
link1 = data.frame(from=GenMax$Gen[i,2],
to=GenMax$Gen[i,1],
weight=round(exp(GenMax$Gen[i,4]),2))
link2 = data.frame(from=GenMax$Gen[i,3],
to=GenMax$Gen[i,1],
weight=round(exp(GenMax$Gen[i,4]),2))
links = rbind(links,link1,link2)
}
}
net = graph_from_data_frame(d=links, vertices=nodes, directed=TRUE)
net
nombre_de_generation = max(MatIndiv[,18])
#colrs = rainbow(nombre_de_generation, alpha=.5)
colrs = brewer.pal(nombre_de_generation, "Set3")
# Attribuer des couleurs selon le type de média
V(net)$color = colrs[V(net)$gen]
V(net)$size = 12
V(net)$label.font = 4  #Fonte : 1 normal, 2 gras, 3, italique, 4 italique gras, 5 symbole
V(net)$label.color = "black"
V(net)$label.family = "Times"
# Épaisseur des liens fonction de l'intensité
E(net)$width = 0.5+E(net)$weight*4
# Changer la taille des flèches et la couleur des liens
E(net)$arrow.size = 0.2 #Taille des fléches, 1 par défaut
E(net)$arrow.width = 1.5 #Épaisseur des flèches, 1 par défaut
E(net)$edge.lty = 1 #Type de ligne
E(net)$label = E(net)$weight #Vecteur de type caractère utilisé pour nommer les liens
E(net)$edge.label.family = "Helvetica" #Police des labels (e.g.“Times”, “Helvetica”)
#E(net)$label.color = "black"
E(net)$edge.label.cex = 0.1 #Taille de la police pour les labels des liens
E(net)$edge.color = "gray80"
E(net)$edge.label = E(net)$weight
plot(net, main ="Représentation de la genealogie")
legend("bottomleft", inset = 0.01, title="génération", legend = 1:nombre_de_generation, pch=21,
text.font=4, col="#777777", pt.bg=colrs, pt.cex=2, cex=.4, bty="n", ncol=1)
}
#########################################################################################
################################# Application ###########################################
GenMax = construireGen()
representerGen(GenMax)
## Documentation sur les graphes
#https://f.hypotheses.org/wp-content/blogs.dir/2996/files/2017/02/visualiseR.pdf

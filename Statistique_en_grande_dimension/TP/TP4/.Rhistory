# pour un enfant, recherche du couple de parents le plus probable
# in : numero de l'enfant
# out : couple de parents le plus probable (vecteur de taille 4 : enfant/parent 1/parent 2/log-proba du lien)
recupParentsMax = function(e){
ParentsMax = c(e[19],0,0,0)
# calculer la matrice des probas pour tous les couples associes a l'enfant e
MatProbasParents = calculerProbasParents(e)
pmax = max(MatProbasParents)
if (pmax != 0){
IndMax = which(MatProbasParents == pmax, arr.ind = TRUE)
# si plusieurs couple de parents ont la même probabilité, on choisit aléatoirement un couple
IndMax = IndMax[sample(1:nrow(IndMax), 1),]
ParentsMax[4] = log(pmax)
ParentsMax[2] = round(IndMax[1])
ParentsMax[3] = round(IndMax[2])
}
# par convention : mettre 0-0 pour les parents si toutes les probas sont nulles, et 0 dans la case log-proba
return(ParentsMax)
}
# construire la genealogie de plus grande proba associee a la matrice des individus
# in : rien
# out : genealogie la plus probable (matrice de n lignes et 4 colonnes) munie de la log-vraisemblance
construireGen = function(){
Gen = matrix(0, nrow=n, ncol=4)
# boucler sur les individus
# chercher le couple le plus probable pour l'individu courant
# empiler le resultat
for (i in 1:n) {
Gen[i,] = recupParentsMax(MatIndiv[i, ])
}
return(list(Gen = Gen, lLik = sum(Gen[, 4])))
}
library("igraph")
GenMax = construireGen()
nodes = data.frame(id=GenMax$Gen[,1],
gen=MatIndiv[,18])
links = data.frame()
for (i in 1:n) {
if (GenMax$Gen[i,2] != 0 & GenMax$Gen[i,3] != 0){
link1 = data.frame(from=GenMax$Gen[i,2],
to=GenMax$Gen[i,1],
weight=round(exp(GenMax$Gen[i,4]),2))
link2 = data.frame(from=GenMax$Gen[i,3],
to=GenMax$Gen[i,1],
weight=round(exp(GenMax$Gen[i,4]),2))
links = rbind(links,link1,link2)
}
}
net = graph_from_data_frame(d=links, vertices=nodes, directed=TRUE)
net
library('RColorBrewer')
nombre_de_generation = max(MatIndiv[,18])
#colrs = rainbow(nombre_de_generation, alpha=.5)
colrs = brewer.pal(nombre_de_generation, "Set3")
# Attribuer des couleurs selon le type de média
V(net)$color = colrs[V(net)$gen]
V(net)$size = 12
#Fonte : 1 normal, 2 gras, 3, italique, 4 italique gras, 5 symbole
V(net)$label.font = 2
V(net)$label.color = "black"
V(net)$label.family = "Times"
# Épaisseur des liens fonction de l'intensité
E(net)$width = 1+E(net)$weight*5
# Changer la taille des flèches et la couleur des liens
E(net)$arrow.size = .05 #Taille des fléches, 1 par défaut
E(net)$arrow.width = 3 #Épaisseur des flèches, 1 par défaut
E(net)$edge.lty = 2 #Type de ligne
E(net)$label = E(net)$weight #Vecteur de type caractère utilisé pour nommer les liens
E(net)$edge.label.family = "Helvetica" #Police des labels (e.g.“Times”, “Helvetica”)
# E(net)$label.color = "black"
E(net)$edge.label.cex = 0.1 #Taille de la police pour les labels des liens
E(net)$edge.color = "gray80"
E(net)$edge.label = E(net)$weight
plot(net, main ="Représentation de la genealogie")
legend(x = "topleft", title="Génération", legend = 1:nombre_de_generation, pch=21,
text.font=4, col="#777777", pt.bg=colrs, pt.cex=2, cex=.5, bty="n", ncol=1)
# legend('topleft',legend=levels(sizeCut),pt.cex=scaled,col='black',pch=21, pt.bg='orange')
# https://f.hypotheses.org/wp-content/blogs.dir/2996/files/2017/02/visualiseR.pdf
############################################################################################
######### Données de Matiss à vérifier
# path = "/home/malick/Bureau/Master_DS/Option_Biologie/test16.csv"
# DF = read.csv(file = path)
# MatIndiv = data.matrix(DF)
# n = 16
# ncol = 4*4+3
######## commencer par creer un jeu de donnees virtuel de petite taille
# n = 6
# ncol = 4*4+3
# MatIndiv = matrix(0, nrow=n, ncol=ncol)
#
# MatIndiv[1, ] = c(10,10,0,0,40,50,0,0,40,80,0,0,110,120,0,0,2,1,1)
# MatIndiv[2, ] = c(10,20,0,0,60,60,0,0,70,80,0,0,120,130,0,0,2,1,2)
# MatIndiv[3, ] = c(20,20,0,0,50,60,0,0,80,80,0,0,110,120,0,0,2,1,3)
# MatIndiv[4, ] = c(10,20,0,0,50,60,0,0,80,80,0,0,110,120,0,0,2,2,4)
# MatIndiv[5, ] = c(10,20,0,0,60,50,0,0,70,80,0,0,130,120,0,0,2,3,5)
# MatIndiv[6, ] = c(10,20,0,0,60,40,0,0,70,40,0,0,120,120,0,0,2,3,6)
#######################################################################################
###### on simule un jeu de données plus grand
n = 50
ncol = 4*4+3
nombre_de_generation = 13
n_al = 5
MatIndiv = matrix(0, nrow=n, ncol=ncol)
for (i in 1:n) {
MatIndiv[i, ] = c(sample(1:n_al,1), sample(1:n_al,1), 0, 0,
sample(1:n_al,1), sample(1:n_al,1), 0, 0,
sample(1:n_al,1), sample(1:n_al,1), 0, 0,
sample(1:n_al,1), sample(1:n_al,1), 0, 0,
2, sample(1:nombre_de_generation,1), i)
}
##########################################################################################
# compte le nombre d'enfants virtuels de meme genotype que l'enfant de reference
# in : enfants virtuels (matrice avec un genotype sur chaque ligne), genotype de l'enfant (vecteur)
# out : le nombre d'enfants virtuels correspondant
comparerEnf = function(EnfVirt, Enf){
# attention : on pensera a trier les vecteurs avant de les comparer
EnfTri = sort(Enf)
nb = 0
for (i in 1:nrow(EnfVirt)) {
EnfVirt_Tri = sort(EnfVirt[i,])
if (sum(abs(EnfTri - EnfVirt_Tri)) == 0) {
nb = nb + 1
}
}
return(nb)
}
# genere la liste des enfants virtuels a partir du genotype des parents pour le schema 2x-2x
# in : genotype des parents (vecteurs de taille 2)
# out : liste des enfants virtuels (matrice de 4 lignes et 2 colonnes)
genererEnfVirt22 = function(GenP1s, GenP2s){
# creer les 4 enfants virtuels pour le schema 2x-2x
# x <- c(10,20)
# y <- c(30,40)
# d1 <- expand.grid(x = x, y = y)
EnfVirt = expand.grid(x = GenP1s, y = GenP2s)
return(as.matrix(EnfVirt))
}
# calcul de la proba d'un lien entre deux parents et un enfant
# in : infos genetiques sur les deux parents et l'enfant (vecteurs de taille 17 : genotypes 4x4 + ploidie)
# out : proba du lien
calculerProbaLien = function(GenP1, GenP2, GenE){
# traiter seulement 2x-2x dans un premier temps (recuperer les ploidies et rentrer seulement si toutes sont egales a 2)
plo1 = GenP1[17]
plo2 = GenP2[17]
ploE = GenE[17]
if (plo1==2 & plo2==2 & ploE==2) {
p = 1
# boucler sur les 4 signaux en multipliant p par la nouvelle proba
# a chaque boucle :
# creer des vecteurs de taille 2 avec les alleles des parents et de l'enfant sur le signal
# generer les enfants virtuels du croisement, comparer avec l'enfant et deduire la proba
for (s in 1:4) {
GenP1S = GenP1[(4*(s-1)+1):(4*s)]
GenP2S = GenP2[(4*(s-1)+1):(4*s)]
GenES = GenE[(4*(s-1)+1):(4*s)]
G1 = GenP1S[1:2]
G2 = GenP2S[1:2]
GE = GenES[1:2]
EnfVirt = genererEnfVirt22(G1,G2)
nb = comparerEnf(EnfVirt, GE)
p = p*nb/4
}
}
return(p)
}
# construire pour un enfant la matrice des probas associee a tous les couples de parents potentiels
# in : numero de l'enfant
# out : matrice des probas (n lignes et n colonnes)
calculerProbasParents = function(e){
MatProbasParents = matrix(0, nrow=n, ncol=n)
# recuperer en amont la generation de l'enfant
# double boucle sur les parents
# ne rentrer que si le couple est envisageable (parents distincts de l'enfant, anterieurs, ...)
# calculer la proba du lien a l'aide des infos genetiques des parents et de l'enfant
# penser a renormaliser
for (i in 1:n) {
for (j in 1:n) {
if (i<j & i!=e[19] &  j!=e[19] & e[18]>MatIndiv[i, 18] & e[18]>MatIndiv[j, 18]) {
MatProbasParents[i,j] = calculerProbaLien(MatIndiv[i, ],MatIndiv[j, ],e)
}
}
}
s = sum(MatProbasParents)
if (s != 0){
MatProbasParents = MatProbasParents/s
}
return(MatProbasParents)
}
# pour un enfant, recherche du couple de parents le plus probable
# in : numero de l'enfant
# out : couple de parents le plus probable (vecteur de taille 4 : enfant/parent 1/parent 2/log-proba du lien)
recupParentsMax = function(e){
ParentsMax = c(e[19],0,0,0)
# calculer la matrice des probas pour tous les couples associes a l'enfant e
MatProbasParents = calculerProbasParents(e)
pmax = max(MatProbasParents)
if (pmax != 0){
IndMax = which(MatProbasParents == pmax, arr.ind = TRUE)
# si plusieurs couple de parents ont la même probabilité, on choisit aléatoirement un couple
IndMax = IndMax[sample(1:nrow(IndMax), 1),]
ParentsMax[4] = log(pmax)
ParentsMax[2] = round(IndMax[1])
ParentsMax[3] = round(IndMax[2])
}
# par convention : mettre 0-0 pour les parents si toutes les probas sont nulles, et 0 dans la case log-proba
return(ParentsMax)
}
# construire la genealogie de plus grande proba associee a la matrice des individus
# in : rien
# out : genealogie la plus probable (matrice de n lignes et 4 colonnes) munie de la log-vraisemblance
construireGen = function(){
Gen = matrix(0, nrow=n, ncol=4)
# boucler sur les individus
# chercher le couple le plus probable pour l'individu courant
# empiler le resultat
for (i in 1:n) {
Gen[i,] = recupParentsMax(MatIndiv[i, ])
}
return(list(Gen = Gen, lLik = sum(Gen[, 4])))
}
library("igraph")
GenMax = construireGen()
nodes = data.frame(id=GenMax$Gen[,1],
gen=MatIndiv[,18])
links = data.frame()
for (i in 1:n) {
if (GenMax$Gen[i,2] != 0 & GenMax$Gen[i,3] != 0){
link1 = data.frame(from=GenMax$Gen[i,2],
to=GenMax$Gen[i,1],
weight=round(exp(GenMax$Gen[i,4]),2))
link2 = data.frame(from=GenMax$Gen[i,3],
to=GenMax$Gen[i,1],
weight=round(exp(GenMax$Gen[i,4]),2))
links = rbind(links,link1,link2)
}
}
net = graph_from_data_frame(d=links, vertices=nodes, directed=TRUE)
net
library('RColorBrewer')
nombre_de_generation = max(MatIndiv[,18])
#colrs = rainbow(nombre_de_generation, alpha=.5)
colrs = brewer.pal(nombre_de_generation, "Set3")
# Attribuer des couleurs selon le type de média
V(net)$color = colrs[V(net)$gen]
V(net)$size = 12
#Fonte : 1 normal, 2 gras, 3, italique, 4 italique gras, 5 symbole
V(net)$label.font = 2
V(net)$label.color = "black"
V(net)$label.family = "Times"
# Épaisseur des liens fonction de l'intensité
E(net)$width = 1+E(net)$weight*5
# Changer la taille des flèches et la couleur des liens
E(net)$arrow.size = .05 #Taille des fléches, 1 par défaut
E(net)$arrow.width = 3 #Épaisseur des flèches, 1 par défaut
E(net)$edge.lty = 2 #Type de ligne
E(net)$label = E(net)$weight #Vecteur de type caractère utilisé pour nommer les liens
E(net)$edge.label.family = "Helvetica" #Police des labels (e.g.“Times”, “Helvetica”)
# E(net)$label.color = "black"
E(net)$edge.label.cex = 0.1 #Taille de la police pour les labels des liens
E(net)$edge.color = "gray80"
E(net)$edge.label = E(net)$weight
plot(net, main ="Représentation de la genealogie")
legend(x = "topleft", title="Génération", legend = 1:nombre_de_generation, pch=21,
text.font=4, col="#777777", pt.bg=colrs, pt.cex=2, cex=.5, bty="n", ncol=1)
# legend('topleft',legend=levels(sizeCut),pt.cex=scaled,col='black',pch=21, pt.bg='orange')
# https://f.hypotheses.org/wp-content/blogs.dir/2996/files/2017/02/visualiseR.pdf
############################################################################################
######### Données de Matiss à vérifier
# path = "/home/malick/Bureau/Master_DS/Option_Biologie/test16.csv"
# DF = read.csv(file = path)
# MatIndiv = data.matrix(DF)
# n = 16
# ncol = 4*4+3
######## commencer par creer un jeu de donnees virtuel de petite taille
# n = 6
# ncol = 4*4+3
# MatIndiv = matrix(0, nrow=n, ncol=ncol)
#
# MatIndiv[1, ] = c(10,10,0,0,40,50,0,0,40,80,0,0,110,120,0,0,2,1,1)
# MatIndiv[2, ] = c(10,20,0,0,60,60,0,0,70,80,0,0,120,130,0,0,2,1,2)
# MatIndiv[3, ] = c(20,20,0,0,50,60,0,0,80,80,0,0,110,120,0,0,2,1,3)
# MatIndiv[4, ] = c(10,20,0,0,50,60,0,0,80,80,0,0,110,120,0,0,2,2,4)
# MatIndiv[5, ] = c(10,20,0,0,60,50,0,0,70,80,0,0,130,120,0,0,2,3,5)
# MatIndiv[6, ] = c(10,20,0,0,60,40,0,0,70,40,0,0,120,120,0,0,2,3,6)
#######################################################################################
###### on simule un jeu de données plus grand
n = 30
ncol = 4*4+3
nombre_de_generation = 8
n_al = 4
MatIndiv = matrix(0, nrow=n, ncol=ncol)
for (i in 1:n) {
MatIndiv[i, ] = c(sample(1:n_al,1), sample(1:n_al,1), 0, 0,
sample(1:n_al,1), sample(1:n_al,1), 0, 0,
sample(1:n_al,1), sample(1:n_al,1), 0, 0,
sample(1:n_al,1), sample(1:n_al,1), 0, 0,
2, sample(1:nombre_de_generation,1), i)
}
##########################################################################################
# compte le nombre d'enfants virtuels de meme genotype que l'enfant de reference
# in : enfants virtuels (matrice avec un genotype sur chaque ligne), genotype de l'enfant (vecteur)
# out : le nombre d'enfants virtuels correspondant
comparerEnf = function(EnfVirt, Enf){
# attention : on pensera a trier les vecteurs avant de les comparer
EnfTri = sort(Enf)
nb = 0
for (i in 1:nrow(EnfVirt)) {
EnfVirt_Tri = sort(EnfVirt[i,])
if (sum(abs(EnfTri - EnfVirt_Tri)) == 0) {
nb = nb + 1
}
}
return(nb)
}
# genere la liste des enfants virtuels a partir du genotype des parents pour le schema 2x-2x
# in : genotype des parents (vecteurs de taille 2)
# out : liste des enfants virtuels (matrice de 4 lignes et 2 colonnes)
genererEnfVirt22 = function(GenP1s, GenP2s){
# creer les 4 enfants virtuels pour le schema 2x-2x
# x <- c(10,20)
# y <- c(30,40)
# d1 <- expand.grid(x = x, y = y)
EnfVirt = expand.grid(x = GenP1s, y = GenP2s)
return(as.matrix(EnfVirt))
}
# calcul de la proba d'un lien entre deux parents et un enfant
# in : infos genetiques sur les deux parents et l'enfant (vecteurs de taille 17 : genotypes 4x4 + ploidie)
# out : proba du lien
calculerProbaLien = function(GenP1, GenP2, GenE){
# traiter seulement 2x-2x dans un premier temps (recuperer les ploidies et rentrer seulement si toutes sont egales a 2)
plo1 = GenP1[17]
plo2 = GenP2[17]
ploE = GenE[17]
if (plo1==2 & plo2==2 & ploE==2) {
p = 1
# boucler sur les 4 signaux en multipliant p par la nouvelle proba
# a chaque boucle :
# creer des vecteurs de taille 2 avec les alleles des parents et de l'enfant sur le signal
# generer les enfants virtuels du croisement, comparer avec l'enfant et deduire la proba
for (s in 1:4) {
GenP1S = GenP1[(4*(s-1)+1):(4*s)]
GenP2S = GenP2[(4*(s-1)+1):(4*s)]
GenES = GenE[(4*(s-1)+1):(4*s)]
G1 = GenP1S[1:2]
G2 = GenP2S[1:2]
GE = GenES[1:2]
EnfVirt = genererEnfVirt22(G1,G2)
nb = comparerEnf(EnfVirt, GE)
p = p*nb/4
}
}
return(p)
}
# construire pour un enfant la matrice des probas associee a tous les couples de parents potentiels
# in : numero de l'enfant
# out : matrice des probas (n lignes et n colonnes)
calculerProbasParents = function(e){
MatProbasParents = matrix(0, nrow=n, ncol=n)
# recuperer en amont la generation de l'enfant
# double boucle sur les parents
# ne rentrer que si le couple est envisageable (parents distincts de l'enfant, anterieurs, ...)
# calculer la proba du lien a l'aide des infos genetiques des parents et de l'enfant
# penser a renormaliser
for (i in 1:n) {
for (j in 1:n) {
if (i<j & i!=e[19] &  j!=e[19] & e[18]>MatIndiv[i, 18] & e[18]>MatIndiv[j, 18]) {
MatProbasParents[i,j] = calculerProbaLien(MatIndiv[i, ],MatIndiv[j, ],e)
}
}
}
s = sum(MatProbasParents)
if (s != 0){
MatProbasParents = MatProbasParents/s
}
return(MatProbasParents)
}
# pour un enfant, recherche du couple de parents le plus probable
# in : numero de l'enfant
# out : couple de parents le plus probable (vecteur de taille 4 : enfant/parent 1/parent 2/log-proba du lien)
recupParentsMax = function(e){
ParentsMax = c(e[19],0,0,0)
# calculer la matrice des probas pour tous les couples associes a l'enfant e
MatProbasParents = calculerProbasParents(e)
pmax = max(MatProbasParents)
if (pmax != 0){
IndMax = which(MatProbasParents == pmax, arr.ind = TRUE)
# si plusieurs couple de parents ont la même probabilité, on choisit aléatoirement un couple
IndMax = IndMax[sample(1:nrow(IndMax), 1),]
ParentsMax[4] = log(pmax)
ParentsMax[2] = round(IndMax[1])
ParentsMax[3] = round(IndMax[2])
}
# par convention : mettre 0-0 pour les parents si toutes les probas sont nulles, et 0 dans la case log-proba
return(ParentsMax)
}
# construire la genealogie de plus grande proba associee a la matrice des individus
# in : rien
# out : genealogie la plus probable (matrice de n lignes et 4 colonnes) munie de la log-vraisemblance
construireGen = function(){
Gen = matrix(0, nrow=n, ncol=4)
# boucler sur les individus
# chercher le couple le plus probable pour l'individu courant
# empiler le resultat
for (i in 1:n) {
Gen[i,] = recupParentsMax(MatIndiv[i, ])
}
return(list(Gen = Gen, lLik = sum(Gen[, 4])))
}
library("igraph")
GenMax = construireGen()
nodes = data.frame(id=GenMax$Gen[,1],
gen=MatIndiv[,18])
links = data.frame()
for (i in 1:n) {
if (GenMax$Gen[i,2] != 0 & GenMax$Gen[i,3] != 0){
link1 = data.frame(from=GenMax$Gen[i,2],
to=GenMax$Gen[i,1],
weight=round(exp(GenMax$Gen[i,4]),2))
link2 = data.frame(from=GenMax$Gen[i,3],
to=GenMax$Gen[i,1],
weight=round(exp(GenMax$Gen[i,4]),2))
links = rbind(links,link1,link2)
}
}
net = graph_from_data_frame(d=links, vertices=nodes, directed=TRUE)
net
library('RColorBrewer')
nombre_de_generation = max(MatIndiv[,18])
#colrs = rainbow(nombre_de_generation, alpha=.5)
colrs = brewer.pal(nombre_de_generation, "Set3")
# Attribuer des couleurs selon le type de média
V(net)$color = colrs[V(net)$gen]
V(net)$size = 12
#Fonte : 1 normal, 2 gras, 3, italique, 4 italique gras, 5 symbole
V(net)$label.font = 2
V(net)$label.color = "black"
V(net)$label.family = "Times"
# Épaisseur des liens fonction de l'intensité
E(net)$width = 1+E(net)$weight*5
# Changer la taille des flèches et la couleur des liens
E(net)$arrow.size = .05 #Taille des fléches, 1 par défaut
E(net)$arrow.width = 3 #Épaisseur des flèches, 1 par défaut
E(net)$edge.lty = 2 #Type de ligne
E(net)$label = E(net)$weight #Vecteur de type caractère utilisé pour nommer les liens
E(net)$edge.label.family = "Helvetica" #Police des labels (e.g.“Times”, “Helvetica”)
# E(net)$label.color = "black"
E(net)$edge.label.cex = 0.1 #Taille de la police pour les labels des liens
E(net)$edge.color = "gray80"
E(net)$edge.label = E(net)$weight
plot(net, main ="Représentation de la genealogie")
legend(x = "topleft", title="Génération", legend = 1:nombre_de_generation, pch=21,
text.font=4, col="#777777", pt.bg=colrs, pt.cex=2, cex=.5, bty="n", ncol=1)
# legend('topleft',legend=levels(sizeCut),pt.cex=scaled,col='black',pch=21, pt.bg='orange')
# https://f.hypotheses.org/wp-content/blogs.dir/2996/files/2017/02/visualiseR.pdf
############################################################################################
setwd("~/Bureau/Master_DS/Statistique_en_grande_dimension/TP/TP4")
## TP Support Vector Machines
library(e1071)
n=500
b=runif(n,min=0,max=2)
bprim=runif(n,min=-2,max=0)
x=runif(n,min=-3,max=3)
xprim=runif(n,min=-3,max=3)
x1=c(x,xprim)
x2=c(b+x,bprim+xprim)
y=c(rep(1,n),rep(-1,n))
Z=data.frame(X1=x1,X2=x2,classe=y)
Z$classe=as.factor(Z$classe)
svmlinear=svm(classe~.,data=Z,kernel="linear",cost=20)
plot(svmlinear,data=Z)
## TP Support Vector Machines
library(e1071)
n=500
b=runif(n,min=0,max=2)
b
## TP Support Vector Machines
library(e1071)
n=500
b=runif(n,min=0,max=2)
bprim=runif(n,min=-2,max=0)
x=runif(n,min=-3,max=3)
xprim=runif(n,min=-3,max=3)
x1=c(x,xprim)
x2=c(b+x,bprim+xprim)
y=c(rep(1,n),rep(-1,n))
Z=data.frame(X1=x1,X2=x2,classe=y)
Z$classe=as.factor(Z$classe)
svmlinear=svm(classe~.,data=Z,kernel="linear",cost=20)
plot(svmlinear,data=Z)
## vecteurs supports/indices/intercept
xi=svmlinear$SV
View(svmlinear)
View(xi)
alphaygreci=svmlinear$coefs
View(alphaygreci)
beta0=svmlinear$rho
svmlinear$index
## vecteurs supports/indices/intercept
xi=svmlinear$SV
View(xi)
View(alphaygreci)
alphaygreci=svmlinear$coefs
View(alphaygreci)
svmlinear$index
View(alphaygreci)
View(xi)
## Prendre cost proche de l'infini pour retrouve le SVM non flexible.
## Remarque : le SVM non flexible est basé sur un faible nombre de vecteurs supports
## prédiction sur l'échantillon d'entraînement
pred=predict(svmlinear,Z)
tab=table(Predits=pred,Obs=Z$classe)
tab
